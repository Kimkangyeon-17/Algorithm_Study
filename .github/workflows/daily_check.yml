# .github/workflows/daily_check.yml
name: 📊 Daily Algorithm Study Check

on:
  schedule:
    # 매일 한국시간 오후 9시 (UTC 12시)에 실행
    - cron: '0 12 * * *'
  workflow_dispatch:  # 수동 실행 가능
    
jobs:
  check-daily-progress:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 레포지토리 체크아웃
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 히스토리 가져오기
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: 🐍 Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 🔧 Git 설정
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: 🔄 최신 변경사항 동기화 (개선된 버전)
      run: |
        echo "📡 원격 저장소와 동기화 중..."
        
        # 원격 저장소 최신 정보 가져오기
        git fetch origin
        
        # 현재 브랜치 확인
        current_branch=$(git branch --show-current)
        echo "현재 브랜치: $current_branch"
        
        # 로컬 변경사항 확인
        if [[ -n $(git status --porcelain) ]]; then
          echo "⚠️  로컬에 미커밋 변경사항 발견"
          git status --short
          echo "임시로 커밋합니다..."
          git add .
          git commit -m "임시 커밋: 워크플로우 실행 전 변경사항" || true
        fi
        
        # 원격과 동기화 - 더 안전한 방법
        echo "🔄 원격 브랜치와 동기화..."
        if git merge origin/master --no-edit; then
          echo "✅ 동기화 성공"
        else
          echo "❌ 동기화 실패, 원격 상태로 리셋"
          git merge --abort
          git reset --hard origin/master
        fi
        
        echo "✅ 동기화 완료"
        
    - name: 🔍 현재 상태 확인
      run: |
        echo "📂 현재 디렉토리 구조:"
        ls -la
        echo ""
        echo "📁 주차 폴더들:"
        ls -d *주차 2>/dev/null || echo "주차 폴더 없음"
        echo ""
        echo "🔍 Git 상태:"
        git status --short
        
    - name: 📝 필수 파일 확인 및 생성
      run: |
        echo "📝 필수 파일 확인 중..."
        
        # 8월3주차 폴더 확인
        if [ ! -d "8월3주차" ]; then
          echo "📁 8월3주차 폴더 생성"
          mkdir -p "8월3주차"
        fi
        
        # 0820 폴더 확인
        if [ ! -d "8월3주차/0820" ]; then
          echo "📁 8월3주차/0820 폴더 생성"
          mkdir -p "8월3주차/0820"
        fi
        
        # logs 폴더 확인
        if [ ! -d "logs" ]; then
          echo "📁 logs 폴더 생성"
          mkdir -p "logs"
        fi
        
        # scripts 폴더 확인
        if [ ! -d "scripts" ]; then
          echo "📁 scripts 폴더 생성"
          mkdir -p "scripts"
        fi
        
        echo "✅ 필수 폴더 확인 완료"
        
    - name: 📊 일일 진행상황 체크
      run: |
        echo "🚀 일일 알고리즘 스터디 체크 시작!"
        if [ -f "scripts/daily_check.py" ]; then
          python scripts/daily_check.py || echo "⚠️  일일 체크 스크립트 실행 중 오류 발생"
        else
          echo "❌ daily_check.py 파일이 없습니다."
        fi
        
    - name: 📈 진행률 업데이트
      run: |
        echo "📈 진행률 업데이트 시작!"
        if [ -f "scripts/update_progress.py" ]; then
          python scripts/update_progress.py || echo "⚠️  진행률 업데이트 스크립트 실행 중 오류 발생"
        else
          echo "❌ update_progress.py 파일이 없습니다."
        fi
        
    - name: 💾 변경사항 커밋 및 푸시 (개선된 버전)
      run: |
        echo "💾 변경사항 확인 및 커밋..."
        
        # 변경사항 확인
        if [[ -n $(git status --porcelain) ]]; then
          echo "📝 변경사항 발견:"
          git status --short
          
          # 변경사항 스테이징
          git add .
          
          # 커밋 메시지
          commit_message="📊 자동 업데이트: $(date +'%Y-%m-%d %H:%M') 진행상황"
          
          # 커밋
          if git commit -m "$commit_message"; then
            echo "✅ 커밋 성공"
            
            # 푸시 전 최신 상태 확인
            git fetch origin
            
            # 푸시 시도 (더 안전한 방법)
            push_attempts=0
            max_attempts=3
            push_success=false
            
            while [ $push_attempts -lt $max_attempts ] && [ "$push_success" = false ]; do
              push_attempts=$((push_attempts + 1))
              echo "🚀 푸시 시도 $push_attempts/$max_attempts..."
              
              # 원격 브랜치와 비교
              if git diff --quiet HEAD origin/master; then
                echo "ℹ️  원격과 동일한 상태, 푸시 불필요"
                push_success=true
                break
              fi
              
              # 푸시 시도
              if git push origin master; then
                echo "✅ 푸시 성공!"
                push_success=true
              else
                echo "❌ 푸시 실패, 동기화 후 재시도..."
                
                # 원격 변경사항 가져와서 병합
                git fetch origin
                if git merge origin/master --no-edit; then
                  echo "✅ 병합 성공, 재시도..."
                else
                  echo "❌ 병합 실패"
                  git merge --abort
                  break
                fi
              fi
              
              # 잠시 대기
              sleep 2
            done
            
            if [ "$push_success" = false ]; then
              echo "❌ 푸시 최종 실패"
              echo "📧 수동 확인이 필요합니다."
              # 실패해도 워크플로우는 계속 진행
            fi
          else
            echo "❌ 커밋 실패"
          fi
        else
          echo "ℹ️  업데이트할 변경사항이 없습니다."
        fi
        
    - name: 📋 실행 결과 요약
      if: always()
      run: |
        echo "📋 실행 결과 요약:"
        echo "=============================="
        
        # 로그 파일 확인
        today=$(date +'%Y%m%d')
        daily_log="logs/daily_log_${today}.json"
        progress_log="logs/progress_log_${today}.json"
        
        echo "- 일일 체크: $([ -f "$daily_log" ] && echo '✅ 완료' || echo '❌ 실패')"
        echo "- 진행률 업데이트: $([ -f "$progress_log" ] && echo '✅ 완료' || echo '❌ 실패')"
        
        # 최근 커밋 확인
        recent_commit=$(git log --oneline -1 2>/dev/null || echo "커밋 없음")
        echo "- 최근 커밋: $recent_commit"
        
        # Git 상태
        echo "- Git 상태: $(git status --porcelain | wc -l)개 파일 변경됨"
        
        # 파일 구조 확인
        echo ""
        echo "📁 현재 파일 구조:"
        ls -la 8월3주차/ 2>/dev/null || echo "8월3주차 폴더 없음"
        
        echo ""
        echo "✅ 워크플로우 실행 완료"